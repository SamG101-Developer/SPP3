{
    parserClass = "application.spp3.SPPParser"
    parserUtilClass = "application.spp3.SPPParserUtil"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "SPP"
    psiImplClassSuffix = "Impl"
    psiPackage = "application.spp3.psi"
    psiImplPackage = "application.spp3.psi.impl"

    elementTypeHolderClass = "application.spp3.SPPTypes"
    elementTypeClass = "application.spp3.SPPElementType"
    tokenTypeClass = "application.spp3.SPPTokenType"

    tokens = [
        space = "regexp:\s+"
        comment = "regexp:#.*"

        TK_NEWLINE = "regexp:[\r\n]+"

        TK_DOT = "."
        TK_COLON = ":"
        TK_COMMA = ","
        TK_ASSIGN = "="
        TK_BITWISE_AND = "&"
        TK_BITWISE_OR = "|"
        TK_BITWISE_XOR = "^"
        TK_BITWISE_NOT = "~"
        TK_BITWISE_LSHIFT = "<<"
        TK_BITWISE_RSHIFT = ">>"
        TK_BITWISE_LROTATE = "<<<"
        TK_BITWISE_RROTATE = ">>>"
        TK_LOGICAL_AND = "&&"
        TK_LOGICAL_OR = "||"
        TK_LOGICAL_NOT = "!"
        TK_LESS_THAN = "<"
        TK_GREATER_THAN = ">"
        TK_DBL_COLON = "::"
        TK_LPAREN = "("
        TK_RPAREN = ")"
        TK_LBRACKET = "["
        TK_RBRACKET = "]"
        TK_LBRACE = "{"
        TK_RBRACE = "}"
        TK_QUESTION = "?"
        TK_ELLIPSES = "..."
        TK_EQUAL = "=="
        TK_NOT_EQUAL = "!="
        TK_LESS_THAN_EQUAL = "<="
        TK_GREATER_THAN_EQUAL = ">="
        TK_EOL = ";"
        TK_PLUS = "+"
        TK_MINUS = "-"
        TK_MULTIPLY = "*"
        TK_DIVIDE = "/"
        TK_FLOOR_DIVIDE = "//"
        TK_MODULO = "%"
        TK_EXPONENTIATE = "**"
        TK_QUESTION_QUESTION = "??"
        TK_QUESTION_COLON = "?:"
        TK_ARROW = "->"
        TK_SWAP = "<->"
        TK_SQUIGLE_ARROW = "~>"
        TK_REVERSE_ARROW = "<-"
        TK_INCREMENT = "++"
        TK_DECREMENT = "--"
        TK_AT = "@"
        TK_SPACESHIP = "<=>"
        TK_PIPE = "|>"
        TK_SEMI_COLON = ";"

        KW_MODULE = "module"
        KW_IMPORT = "import"
        KW_EXPORT = "export"
        KW_ENUM = "enum"
        KW_INHERITS = "inherits"
        KW_PUBLIC = "public"
        KW_PROTECTED = "protected"
        KW_PRIVATE = "private"
        KW_PACKAGED = "packaged"
        KW_CONSTRAINT = "constraint"
        KW_ASYNC = "async"
        KW_FUNCTION = "function"
        KW_GENERATOR = "generator"
        KW_MUT = "mut"
        KW_LET = "let"
        KW_IF = "if"
        KW_ELSE = "else"
        KW_WHILE = "while"
        KW_FOR = "for"
        KW_DO = "do"
        KW_MATCH = "match"
        KW_CASE = "case"
        KW_RETURN = "return"
        KW_YIELD = "yield"
        KW_CLASS = "class"
        KW_TYPEDEF = "typedef"
        KW_THREAD = "thread"
        KW_DEFER = "defer"
        KW_AWAIT = "await"
        KW_FRIEND = "friend"
        KW_WHERE = "where"
        KW_TRUE = "true"
        KW_FALSE = "false"

        TK_IDENTIFIER = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"
        TK_BIN_DIGITS = "regexp:0b[0-1]+"
        TK_HEX_DIGITS = "regexp:0x[0-9a-fA-F]+"
        TK_DEC_DIGITS = "regexp:[0-9]+"
        TK_DOUBLE_QUOTE_STRING = "regexp:\".*\""
        TK_SINGLE_QUOTE_CHARACTER = "regexp:'.?'"
        TK_REGEX = "regexp:r\".*\""
    ]
}


Program ::=
    ProgramContents <<eof>>
ProgramContents ::=
    ModuleDefinition ImportBlock? EnumPrototype* ConstraintPrototype* ClassPrototype* FunctionPrototype* ExportBlock?
ModuleDefinition ::=
    KW_MODULE ModuleIdentifier TK_EOL
ModuleIdentifier ::=
    Identifier (TK_DOT Identifier)*


StartBlockToken ::=
    TK_COLON


ImportBlock ::=
    KW_IMPORT StartBlockToken ImportDefinitions
ImportDefinitions ::=
    ImportDefinition*
ImportDefinition ::=
    ImportRelativeDirToken* ModuleIdentifier ImportPullClassToken (Identifiers | ImportAllToken)
ImportPullClassToken ::=
    TK_ARROW
ImportAllToken ::=
    TK_MULTIPLY
ImportRelativeDirToken ::=
    TK_DOT


ExportBlock ::=
    KW_EXPORT StartBlockToken (ExportDefinitions | ExportAllToken)
ExportDefinitions ::=
    Identifier (AnotherItem Identifier)*
ExportAllToken ::=
    TK_MULTIPLY


NewLine ::=
    TK_NEWLINE
EndLine ::=
    TK_SEMICOLON
EmptyImplementation ::=
    TK_ELLIPSES
BasicAssignment ::=
    TK_ASSIGN


ClassPrototype ::=
    Decorators? KW_CLASS GenericIdentifier GenericInheritance? ApplyConstraints? StartBlockToken ClassImplementation
ClassImplementation ::=
    EmptyImplementation | (ClassAttribute* ClassTypedefs* ClassFriends* ClassMethodPrototype*)
ClassAttribute ::=
    AccessModifier? KW_MUT? Identifier TypeHintToken TypeIdentifier (BasicAssignment Expression)? EndLine
ClassTypedefs ::=
    AccessModifier? StatementTypedef
ClassFriends ::=
    AccessModifier? KW_FRIEND TypeIdentifier EndLine
ClassMethodPrototype ::=
    Decorators? AccessModifier? FunctionInnerPrototype
AccessModifier ::=
    KW_PUBLIC | KW_PRIVATE | KW_PROTECTED | KW_PACKAGED


// An enum is a set of members, which can be either a name, or a name with an associated value. The value can be
// any expression, and the name can be any identifier. The members can be separated by newlines, or commas.
EnumPrototype ::=
    KW_ENUM Identifier Inheritance? StartBlockToken EnumMembers
EnumMembers ::=
    EnumMember (AnotherItem EnumMember)*
EnumMember ::=
    Identifier (BasicAssignment Expression)?


// A constraint is a set of constraints, which can be either member constraints (attribute, function, typedef),
// inheritance constraints (can be multiple inheritance), or function-fitting (can be passed into a function).
ConstraintPrototype ::=
    KW_CONSTRAINT GenericIdentifier GenericInheritance? StartBlockToken ConstraintMembers
ConstraintMembers ::=
    (ConstraintMember EndLine)*
ConstraintMember ::=
    TypeIdentifier ConstraintFunctionTypeParameters? ReturnTypeToken ConstraintFunctionReturnType |
    TypeIdentifier GenericInheritance |
    TypeIdentifier FunctionCallArguments
ConstraintFunctionTypeParameters ::=
    TK_LPAREN (ConstraintUnknownType | TypeIdentifiers?) TK_RPAREN
ConstraintFunctionReturnType ::=
    TypeIdentifier | ConstraintUnknownType
ConstraintUnknownType ::=
    TK_QUESTION


Inheritance ::=
    KW_INHERITS AccessModifier? ScopedIdentifier (AnotherItem AccessModifier? ScopedIdentifier)*
GenericInheritance ::=
    KW_INHERITS AccessModifier? TypeIdentifier (AnotherItem AccessModifier? TypeIdentifier)*


// Allow the construction of functions, which can optionally be async, can be a function or generator, has an
// potentially generic identifier, a set of parameters, a set of constraints, and a set of statements. The constraints
// can be a set of type constraints, and a set of value constraints.
FunctionPrototype ::=
    Decorators? FunctionInnerPrototype
FunctionInnerPrototype
    ::= TK_ASYNC? FunctionType (GenericIdentifier | (OperatorIdentifier TypeGenericArguments)) TK_LPAREN FunctionParameters? TK_RPAREN ReturnTypeToken TypeIdentifier ApplyConstraints? StartBlockToken FunctionImplementation
FunctionType ::=
    KW_FUNCTION | KW_GENERATOR
FunctionChainToken ::=
    (FunctionChainOrToken | FunctionChainAndToken) FunctionChainNotToken?
FunctionImplementation ::=
    StatementBlock | EmptyImplementation
ReturnTypeToken ::=
    TK_ARROW
FunctionChainOrToken ::=
    TK_LOGICAL_OR
FunctionChainAndToken ::=
    TK_LOGICAL_AND
FunctionChainNotToken ::=
    TK_LOGICAL_NOT


ApplyConstraints ::=
    KW_WHERE ApplyTypeConstraints? ApplyValueConstraints?
ApplyTypeConstraints ::=
    ApplyTypeConstraint (AnotherItem ApplyTypeConstraint)*
ApplyTypeConstraint ::=
    Identifiers TypeHintToken TypeIdentifier (FunctionChainToken TypeIdentifier)*
ApplyValueConstraints ::=
    Expression (AnotherItem Expression)*


// How functions are called: the set of arguments, which will be all the normal arguments first, followed by all the
// named arguments. The keyword arguments allow different optional parameters to be filled in, and the normal arguments
// are the required parameters. The normal arguments are filled in in the order they are defined.
FunctionCallArguments ::=
    (FunctionCallNormalArguments (AnotherItem FunctionCallNamedArguments)?) | FunctionCallNamedArguments
FunctionCallNormalArguments ::=
    FunctionCallNormalArgument (AnotherItem FunctionCallNormalArgument)*
FunctionCallNamedArguments ::=
    FunctionCallNamedArgument (AnotherItem FunctionCallNamedArgument)*
FunctionCallNormalArgument ::=
    Expression
FunctionCallNamedArgument ::=
    Identifier BasicAssignment FunctionCallNormalArgument


// How functions are defined: the set of required parameters, followed by the set of optional parameters. The optional
// parameters are defined as a required parameter with a default value. The required parameters are defined as a
// parameter with a type. The optional parameters order doesn't matter if named arguments are used, but the required
// parameters order does matter.
FunctionParameters ::=
    FunctionOptionalParameter (AnotherItem FunctionParameters2)? |
    FunctionRequiredParameter (AnotherItem FunctionParameters)?
FunctionParameters2 ::=
    FunctionOptionalParameter (AnotherItem FunctionParameters2)? |
    FunctionVariadicParameter
FunctionRequiredParameter ::=
    KW_MUT? Identifier TypeHintToken TypeIdentifier
FunctionOptionalParameter ::=
    FunctionRequiredParameter BasicAssignment Expression
FunctionVariadicParameter ::=
    FunctionRequiredParameter OperatorIdentifierVariadic


// Decorators are used to decorate the following item with additional information. They can decorate a function or a
// class. TODO
Decorator ::=
    DecoratorToken ScopedIdentifier PostfixFunctionCallOperator?
Decorators ::=
    Decorator (NewLine Decorator)*
DecoratorToken ::=
    TK_AT


// Lowest precedence operators
Expression ::=
    ExpressionPartialPipe
ExpressionPartialPipe ::=
    ExpressionAssignment (TK_PIPE ExpressionPartialPipe)*
ExpressionAssignment ::=
    ExpressionTernary (OperatorIdentifierAssignment ExpressionAssignment)*
ExpressionTernary ::=
    ExpressionNullCoalescence (TK_QUESTION Expression (TK_COLON ExpressionTernary)?)*
ExpressionNullCoalescence ::=
    ExpressionLogicalOr (OperatorIdentifierNullCoalescing ExpressionNullCoalescence)*
ExpressionLogicalOr ::=
    ExpressionLogicalAnd (TK_LOGICAL_OR ExpressionLogicalOr)*
ExpressionLogicalAnd ::=
    ExpressionBitwiseOr (TK_LOGICAL_AND ExpressionLogicalAnd)*
ExpressionBitwiseOr ::=
    ExpressionBitwiseXor (TK_BITWISE_OR ExpressionBitwiseOr)*
ExpressionBitwiseXor ::=
    ExpressionBitwiseAnd (TK_BITWISE_XOR ExpressionBitwiseXor)*
ExpressionBitwiseAnd ::=
    ExpressionEquality (TK_BITWISE_AND ExpressionBitwiseAnd)*
ExpressionEquality ::=
    ExpressionRelational (OperatorIdentifierEquality ExpressionEquality)*
ExpressionRelational ::=
    ExpressionShift (OperatorIdentifierRelational ExpressionRelational)*
ExpressionShift ::=
    ExpressionRotate (OperatorIdentifierShift ExpressionShift)*
ExpressionRotate ::=
    ExpressionAdditive (OperatorIdentifierRotate ExpressionRotate)*
ExpressionAdditive ::=
    ExpressionMultiplicative (OperatorIdentifierAdditive ExpressionAdditive)*
ExpressionMultiplicative ::=
    ExpressionExponentiation (OperatorIdentifierMultiplicative ExpressionMultiplicative)*
ExpressionExponentiation ::=
    ExpressionUnary (OperatorIdentifierExponentiation ExpressionExponentiation)*
ExpressionUnary ::=
    (OperatorIdentifierUnary ExpressionUnary) | ExpressionPostfix
ExpressionPostfix ::=
    ExpressionPrimary (OperatorIdentifierPostfix)*
ExpressionPrimary ::=
    Literal | ScopedIdentifier | ExpressionLambda | TK_LPAREN Expression TK_RPAREN
ExpressionLambda ::=
    TK_LBRACKET LambdaParameters TK_RBRACKET TK_ARROW Expression
LambdaParameters ::=
    TK_LPAREN Identifier (AnotherItem Identifier)* TK_RPAREN
// Highest precedence expressions


// The type system is simple and only based on a few rules: the type is a scoped identifier, for example, std::list,
// and the type can be generic, for example, std::list<int>. Recursive generic types are allowed, for example,
// std::list<std::list<std::int>>. A type can have a postfix, to either indicate a nested type, or a variant - for
// example, std::list::value_type or std::list|std::int. The postfix can be repeated recursively. The type can also
// have a ellipsis, to indicate a variadic type - for example, int... is an int parameter pack.
TypeHintToken ::=
    TK_COLON
TypeIdentifier ::=
    TypeReferenceToken? ScopedIdentifier TypeGenericArguments? TypePostfix?
TypeIdentifiers ::=
    TypeIdentifier (AnotherItem TypeIdentifier)*
TypeGenericArguments ::=
    TypeGenericOpenParametersToken TypeGenericParameters TypeGenericCloseParametersToken
TypePostfix ::=
    (ScopeToken | TypeVariantToken) TypeIdentifier
TypeReferenceToken ::=
    TK_BITWISE_AND
TypeGenericOpenParametersToken ::=
    TK_LESS_THAN
TypeGenericCloseParametersToken ::=
    TK_GREATER_THAN
TypeVariantToken ::=
    TK_BITWISE_OR

TypeGenericParameters ::=
    TypeGenericOptionalParameter (AnotherItem TypeGenericParameters2)? |
    TypeGenericRequiredParameter (AnotherItem TypeGenericParameters)?
TypeGenericParameters2 ::=
    TypeGenericOptionalParameter (AnotherItem TypeGenericParameters2)? |
    TypeGenericVariadicParameter
TypeGenericRequiredParameter ::=
    TypeIdentifier
TypeGenericOptionalParameter ::=
    TypeGenericRequiredParameter BasicAssignment TypeIdentifier
TypeGenericVariadicParameter ::=
    TypeGenericRequiredParameter OperatorIdentifierVariadic


// All statements - these are the statements that can be used in the language. They are technically expressions, as they
// can "return" values to the outer scope, but classed as statements because they can also be used as a statement.
// Returning from a statement involves the last statement being the return value if assignment precedes the statement.
StatementIf ::=
    KW_IF StatementConditionExpressions? ExpressionCondition StartBlockToken StatementBlock StatementElse?
StatementElse ::=
    KW_ELSE (StatementIf | (StartBlockToken StatementBlock))
StatementWhile ::=
    KW_WHILE StatementConditionExpressions? ExpressionCondition StartBlockToken StatementBlock
StatementFor ::=
    KW_FOR StatementConditionExpressions? ExpressionFor StartBlockToken StatementBlock
StatementDoWhile ::=
    KW_DO StartBlockToken StatementBlock KW_WHILE ExpressionCondition EndLine
StatementMatch ::=
    KW_MATCH StatementConditionExpressions? ExpressionCondition StartBlockToken StatementCase* StatementCaseDefault
StatementCase ::=
    KW_CASE StatementConditionExpressions? ExpressionCondition StartBlockToken StatementBlock
StatementCaseDefault ::=
    TK_UNDERSCORE StartBlockToken StatementBlock
StatementReturn ::=
    KW_RETURN Expression EndLine
StatementYield ::=
    KW_YIELD Expression EndLine
StatementTypedef ::=
    KW_TYPEDEF GenericIdentifier BasicAssignment TypeIdentifier EndLine
StatementThread ::=
    KW_THREAD Expression EndLine
StatementDefer ::=
    KW_DEFER Expression EndLine
StatementAwait ::=
    KW_AWAIT Expression EndLine

StatementVariableDefinition ::=
    StatementVariableSingleDefinition | StatementVariableMultipleDefinition
StatementVariableSingleDefinition ::=
    KW_LET KW_MUT? Identifier BasicAssignment (Expression | StatementIf | StatementMatch)
StatementVariableMultipleDefinition ::=
    KW_LET KW_MUT? Identifiers BasicAssignment (Expression | StatementIf | StatementMatch)

StatementListComprehensionFunction ::=
    TK_LBRACKET Expression TK_FOR Identifier ForLoopIteratorToken Expression TK_RBRACKET
StatementListComprehensionGenerator ::=
    TK_LPAREN Expression TK_FOR Identifier ForLoopIteratorToken Expression TK_RPAREN

Statement ::=
    StatementIf | StatementWhile | StatementFor | StatementDoWhile | StatementMatch | StatementReturn | StatementYield |
    StatementTypedef | StatementThread | StatementDefer | StatementAwait | (StatementVariableDefinition EndLine) |
    (StatementListComprehensionFunction EndLine) | (StatementListComprehensionGenerator EndLine) | (Expression EndLine)
StatementBlock ::=
    Statement+

ForLoopIteratorToken ::=
    TK_REVERSE_ARROW


VariableDefinitionOrAssignment ::=
    StatementVariableDefinition | (Identifier OperatorIdentifierAssignment Expression)
StatementConditionExpressions ::=
    (VariableDefinitionOrAssignment AnotherItem)*
ExpressionCondition ::=
    StatementVariableDefinition | Expression
ExpressionFor ::=
    (StatementVariableDefinition | Identifier) ForLoopIteratorToken Expression



// All operator identifiers - these are the names of operators, and are used to identify the type of operator.
OperatorIdentifierAssignment ::=
    TK_ASSIGN | TK_SWAP | ((OperatorIdentifierNullCoalescing | OperatorIdentifierBitwise | OperatorIdentifierLogical | OperatorIdentifierAdditive | ExpressionMultiplicative | ExpressionExponentiation) TK_ASSIGN)
OperatorIdentifierNullCoalescing ::=
    TK_QUESTION_QUESTION | TK_QUESTION_COLON
OperatorIdentifierEquality ::=
    TK_EQUAL | TK_NOT_EQUAL
OperatorIdentifierBitwise ::=
    TK_BITWISE_AND | TK_BITWISE_OR | TK_BITWISE_XOR | TK_BITWISE_NOT | TK_BITWISE_LSHIFT | TK_BITWISE_RSHIFT | TK_BITWISE_LROTATE | TK_BITWISE_RROTATE
OperatorIdentifierLogical ::=
    TK_LOGICAL_AND | TK_LOGICAL_OR | TK_LOGICAL_NOT
OperatorIdentifierRelational ::=
    TK_LESS_THAN | TK_LESS_THAN_EQUAL | TK_GREATER_THAN | TK_GREATER_THAN_EQUAL | TK_SPACESHIP
OperatorIdentifierShift ::=
    TK_BITWISE_LSHIFT | TK_BITWISE_RSHIFT
OperatorIdentifierRotate ::=
    TK_BITWISE_LROTATE | TK_BITWISE_RROTATE
OperatorIdentifierAdditive ::=
    TK_PLUS | TK_MINUS
OperatorIdentifierMultiplicative ::=
    TK_MULTIPLY | TK_DIVIDE | TK_FLOOR_DIVIDE | TK_MODULO
OperatorIdentifierExponentiation ::=
    TK_EXPONENTIATE
OperatorIdentifierMemberAccess ::=
    TK_DOT | TK_QUESTION_DOT | TK_DOUBLE_COLON | TK_ARROW | TK_SQUIGLE_ARROW
OperatorIdentifierUnary ::=
    TK_PLUS | TK_MINUS | TK_BITWISE_NOT | TK_LOGICAL_NOT | (TK_BITWISE_AND KW_MUT?)
OperatorIdentifierVariadic ::= // TODO
    TK_ELLIPSES
OperatorIdentifierPostfix ::=
    PostfixFunctionCallOperator | PostfixMemberAccessOperator | PostfixIndexAccessOperator |
    PostfixSliceAccessOperator | PostfixIncrementOperator | PostfixDecrementOperator
OperatorIdentifierBinary ::=
    OperatorIdentifierNullCoalescing | OperatorIdentifierEquality | OperatorIdentifierBitwise |
    OperatorIdentifierLogical | OperatorIdentifierRelational | OperatorIdentifierAdditive |
    OperatorIdentifierMultiplicative | OperatorIdentifierExponentiation
OperatorIdentifier ::=
    OperatorIdentifierUnary | OperatorIdentifierBinary | "[]" | "()" | "++" | "--" | PostfixMemberAccessOperator


// All identifiers - these are the names of variables, functions, classes, etc. Scoped, multiple, etc are all defined
// here.
Identifier ::=
    TK_IDENTIFIER
ScopedIdentifier ::=
    Identifier (ScopeToken Identifier)*
GenericIdentifier ::=
    Identifier TypeGenericArguments?
Identifiers ::=
    Identifier (AnotherItem Identifier)*
AnotherItem ::=
    TK_COMMA
ScopeToken ::=
    TK_DBL_COLON



// Postfix operators are operators that are applied to the end of an expression, and depending on the expression, may
// be applied to the current part of the expression, or the result of the entire expression.
PostfixFunctionCallOperator ::=
    TK_LPAREN FunctionCallArguments? TK_RPAREN OperatorIdentifierVariadic?
PostfixMemberAccessOperator ::=
    OperatorIdentifierMemberAccess Identifier
PostfixIndexAccessOperator ::=
    TK_LBRACKET Expression TK_RBRACKET
PostfixSliceAccessOperator ::=
    TK_LBRACKET Expression? SliceToken Expression? (AnotherItem Expression)? TK_RBRACKET
PostfixIncrementOperator ::=
    TK_INCREMENT
PostfixDecrementOperator ::=
    TK_DECREMENT


SliceToken ::=
    TK_COLON
RangeToken ::=
    TK_DOT TK_DOT



// All primary literals - these are literals that are not part of a larger expression, and are create-able directly by
// the user. These are the only literals that can be used as a statement. All other literals are part of a larger
// expression (secondary literals) and are not create-able directly by the user.
Literal ::=
    NumberLiteral | StringLiteral | CharLiteral | BooleanLiteral | ListLiteral | MapLiteral | TupleLiteral | SetLiteral
    | PairLiteral | RegexLiteral // | OptionalLiteral | ExpectedLiteral
NumberLiteral ::=
    B10NumberLiteral | B16NumberLiteral | B2NumberLiteral
StringLiteral ::=
    TK_DOUBLE_QUOTE_STRING
CharLiteral ::=
    TK_SINGLE_QUOTE_CHARACTER
BooleanLiteral ::=
    KW_TRUE | KW_FALSE
ListLiteral ::=
    TK_LBRACKET Expression RangeToken Expression? (AnotherItem Expression)? TK_RBRACKET |
    TK_LBRACKET (Expression (AnotherItem Expression)*)? TK_RBRACKET
MapLiteral ::=
    TK_LBRACE InternalPairLiteral (AnotherItem InternalPairLiteral)* TK_RBRACE
TupleLiteral ::=
    TK_LPAREN (Expression AnotherItem)* TK_RPAREN
SetLiteral ::=
    TK_LBRACE (Expression (AnotherItem Expression)*)? TK_RBRACE
PairLiteral ::=
    TK_LPAREN InternalPairLiteral TK_RPAREN
RegexLiteral ::=
    TK_REGEX
//OptionalLiteral ::=
//    TK_QUESTION Expression
//ExpectedLiteral ::=
//    TK_LOGICAL_NOT Expression // !


// All secondary literals - these are literals that are part of a larger expression, and are not create-able directly by
// the user. These literals either make up or are choices for the primary literals.
InternalPairLiteral ::=
    Expression TK_COLON Expression
B2NumberLiteral ::=
    TK_BIN_DIGITS
B10NumberLiteral ::=
    Number
B16NumberLiteral ::=
    TK_HEX_DIGITS


// Constructing a number - a number is a series of digits, with an optional decimal point, optionally complex via "i",
// and an optional exponent. A number expressed as 3.5 + 2ie+5 will be evaluates at two separate numbers, and added
// together into 1 number object
Number ::=
    OperatorIdentifierAdditive? NumericDecimal NumericComplex? NumericExponent?
NumericDecimal ::=
    NumericInteger (NumericDecimalPointToken NumericInteger)?
NumericInteger ::=
    TK_DEC_DIGITS
NumericExponent ::=
    ("e" | "E") OperatorIdentifierAdditive Number
NumericComplex ::=
    ("i" | "I")
NumericDecimalPointToken ::=
    TK_DOT
